openapi: 3.1.0
info:
  title: API сервер для проекта six-cities.
description: |-
  * Список ресурсов и маршрутов сервера six-cities.
license:
  name: MIT
  url: https://opensource.org/licenses/MIT
  version: 2.0.0

tags:
  - name: offers
    description: Действия с объявлениями.
    paths:
      /offers:
        get:
          tags:
            - offers
          summary: Получение набора объявлений.
          description: Запрашивает набор объявлений (60 по умолчанию, получение другого числа объявлений осуществляется в параметре запроса WIP).

          responses:
            "200":
              description: Объекты объявлений.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/offer'

        post:
          tags:
            - offers
          summary: Создание нового объявления.
          description: Создает новое объявление.

          requestBody:
            description: Информация для создания объявления.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/offerDetailed'
            required: true

          responses:
            "201":
              description: Объявление создано. Объект объявления.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/offerDetailed'

            "400":
              description: Объявление не прошло валидацию.

            "401":
              description: Пользователь не авторизован.

      /offers/{offerId}:
        get:
          tags:
            - offers
          summary: Получение полной информации об объявлении.
          description: Запрос полной информации об объявлении.

          responses:
            "200":
              description: Объект объявления.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/offerDetailed'

        post:
          tags:
            - offers
          summary: Редактирование существующего объявления пользователя.
          description: Редактирует существующее объявление пользователя.

          requestBody:
            description: Информация для редактирования объявления.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/offerDetailed'
            required: true

          responses:
            "201":
              description: Объявление отредактировано. Объект объявления.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/offerDetailed'

            "400":
              description: Объявление не прошло валидацию.

            "401":
              description: Пользователь не авторизован.

            "403":
              description: Пользователь не обладает достаточными правами для изменения объявления.

        delete:
          tags:
            - offers
          summary: Удаление объявления пользователя.
          description: Удаляет объявление пользователя.

          responses:
            "200":
              description: Объявление удалено.

            "401":
              description: Пользователь не авторизован.

            "403":
              description: Пользователь не обладает достаточными правами для удаления объявления.



  - name: users
    description: Действия с пользователями.
    paths:
      /users/register:
        post:
          tags:
            - users
          summary: Регистрация пользователя.
          description: Регистрирует нового пользователя.

          requestBody:
            description: Информация для создания нового пользователя.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userCreate'
            required: true

            responses:
              "201":
                description: Пользователь зарегистрирован. Объект пользователя.
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/user'

              "409":
                description: Пользователь с таким email уже существует.


      /users/login:
        get:
          tags:
            - users
          summary: Проверка состояния пользователя
          description: Возвращает информацию по авторизованному пользователю

          requestBody:
            description: Предоставляемый токен.
            content:
              X-token:
                type: string
                example: poXa87kj4oknEWO434N

          responses:
            "201":
              description: Пользователь авторизован. Токен пользователя.
              content:
                X-token:
                  type: string
                  example: poXa87kj4oknEWO434N

            "401":
              description: Пользователь не авторизован.

        post:
          tags:
            - users
          summary: Авторизация пользователя
          description: Авторизует пользователя по логину и паролю

          requestBody:
            description: Информация для аунтефикации.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userLogin'
            required: true

            responses:
              "201":
                description: Успешная аунтефикация. Токен пользователя.
                content:
                  X-token:
                    type: string
                    example: poXa87kj4oknEWO434N

              "400":
                description: Введены некорректные данные / такого пользователя не существует.

      /users/logout:
        post:
          tags:
            - users
          summary: Де-авторизует пользователя
          description: Выполняет выход из учетной записи пользователя

          requestBody:
            description: Предоставляемый токен.
            content:
              X-token:
                type: string
                example: poXa87kj4oknEWO434N

          responses:
            "201":
              description: Пользователь авторизован. Токен пользователя.
              content:
                X-token:
                  type: string
                  example: poXa87kj4oknEWO434N

            "200":
              description: Успешный выход из учетной записи.

            "400":
              description: Токен не прошел валидацию.

  - name: comments
    description: Действия с комментариями.

components:
  schemas:
    offer:
      type: object

      properties:
        title:
          type: string
          example: Комната на двоих

        postedDate:
          type: Date

        city:
          type: string
          example: Amsterdam

        imagePreview:
          type: string
          example: previews/943853

        premium:
          type: boolean
          example: true

        favorite:
          type: boolean
          example: false

        rating:
          type: number
          example: 4.3

        type:
          type: string
          example: Apartment

        price:
          type: number
          example: 2000

        commentsQty:
          type: number
          example: 21

    offerDetailed:
      type: object

      properties:
        title:
          type: string
          example: Комната на двоих

        description:
          type: string
          example: Уютная комната в отеле International

        postedDate:
          type: Date

        city:
          type: string
          example: Amsterdam

        imagePreview:
          type: string
          example: previews/943853

        images:
          type: string[]
          example: [images/340678.jpg, images/340679.jpg, images/340680.jpg, images/340682.jpg, images/340684.jpg, images/340685.jpg]

        premium:
          type: boolean
          example: true

        favorite:
          type: boolean
          example: false

        rating:
          type: number
          example: 4.3

        type:
          type: string
          example: Apartment

        rooms:
          type: number
          example: 2

        guests:
          type: number
          example: 3

        price:
          type: number
          example: 2000

        features:
          type: string[]
          example: [Fridge, Washer]

        coordinates:
          type:
            $ref: '#/components/schemas/coordinates'

        user:
          $ref: '#/components/schemas/user'

    userLogin:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru
        password:
          type: string
          example: 123456

    userCreate:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: Keks

        password:
          type: string
          example: 123456

        status:
          type: string
          example: Premium

        avatarPath:
          type: string
          example: avatars/3849673.jpg

    user:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        email:
          type: string
          example: keks@htmlacademy.ru

    commentNew:
      type: object

      properties:
        text:
          type: string
          example: Все супер!

        rating:
          type: number
          example: 5

    comment:
      type: object

      properties:
        text:
          type: string
          example: Все супер!

        rating:
          type: number
          example: 5

        createdAt:
          type: Date

    coordinates:
      type: object

      properties:
        latitude:
          type: string
          example: 45.2456730

        longitude:
          type: string
          example: 34.3498674
